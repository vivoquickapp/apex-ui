<import name="my-icon" src="../icon/index.ux"></import>
<template>
  <div class="apex-class">
    <div
      class=" apex-message  {{ visible ? 'apex-message-show' : 'apex-message-hide' }}"
      style="background-color:{{!!bgColor ? bgColor : typeColor[type]}}"
      show="{{visible}}"
    >
      <div class="apex-message-content">
        <marquee if="{{enableScroll && useMarquee}}" id="marquee" value="{{content}}" scrollamount=30>{{ content }}</marquee>
        <text else class="{{ visible && enableScroll ? 'apex-message-scroll' : '' }}">{{ content }}</text>
      </div>
      <div if="{{showClose}}" class="apex-message-close" @click="handleClose">
        <my-icon color="#ffffff" type="close" size="38"></my-icon>
      </div>
      
    </div>
  </div>
</template>
<style lang="less">
@import "../styles/base.less";

.apex-class {
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
}

.apex-message {
  width: 100%;
  justify-content: center;
  align-items: center;
  background-color: @primary-color;
  height: 60px * @ratio;
  opacity: 1;

  &-content {
    margin: 0 20px * @ratio;

    text, marquee {
      width: 100%;
      color: #fff;
      text-align: center;
      font-size: @size-font-small;
      lines: 1;
      /* padding: 0 20px * @ratio; */
      text-overflow: ellipsis;
    }
  }

  &-close {
    width: 36px;
    margin-right: 20px;
  }

  &-show {
    animation-name: show;
    animation-duration: 500ms;
  }
  &-hide {
    animation-name: hide;
    animation-duration: 500ms;
  }
  &-scroll {
    animation-name: scroll;
    animation-duration: 8000ms;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
  }
}

@keyframes show {
  from {
    height: 0;
    opacity: 0;
  }
  to {
    height: 60px * @ratio;
    opacity: 1;
  }
}

@keyframes hide {
  from {
    height: 60px * @ratio;
    opacity: 1;
  }
  to {
    height: 0;
    opacity: 0;
  }
}

@keyframes scroll {
  from {
    transform: translateX(750px * @ratio);
  }
  to {
    transform: translateX(-100%);
  }
}
</style>
<script>
import device from '@system.device'
const defaultData = {
  visible: false,
  content: "",
  duration: 2,
  type: "default", // default || success || warning || error
  bgColor: "",
  showClose: false,
  enableScroll: true
};
let timmer = null;
export default {
  data() {
    return {
      visible: false,
      content: "",
      duration: 2,
      type: "default", // default || success || warning || error
      bgColor: "",
      typeColor: {
        default: "#2d8cf0",
        success: "#19be6b",
        warning: "#ff9900",
        error: "#ed3f14"
      },
      useMarquee: false,
      showClose: false,
      enableScroll: true
    };
  },
  onInit() {
    this.$watch('visible', 'visibleChange')
  },
  onReady() {
    device.getInfo({
      success: (ret) => {
        // 当启动滚动且版本号大于1050时文字显示使用marquee组件，对文字长度不会有限制
        if (ret.platformVersionCode > 1050) {
          this.useMarquee = true
        }
      }
    })
  },
  showMessage(options) {
    const { type = "default", duration = 2, bgColor = "", enableScroll = false } = options;
    Object.assign(this._data, {
      ...options,
      type: type,
      duration: duration,
      visible: true,
      enableScroll: enableScroll
    });
    console.log(this.bgColor);
    this.bgColor = bgColor;
    const d = this.duration * 1000;

    if (timmer) clearTimeout(timmer);
    if (d !== 0) {
      timmer = setTimeout(() => {
        this.hideMessage();
        timmer = null;
      }, d);
    }
  },

  hideMessage() {
    Object.assign(this._data, {
      ...defaultData
    });
  },

  handleClose() {
    this.hideMessage();
  },

  visibleChange(newVal) {
    if (this.useMarquee && this.enableScroll) {
      newVal ? this.$element('marquee').start() : this.$element('marquee').stop();
    }
    
  }
};
</script>
